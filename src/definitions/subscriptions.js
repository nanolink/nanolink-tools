"use strict";
exports.__esModule = true;
exports.TempSubscriptions = exports.Subscriptions = void 0;
var commonFields = "id:idStr version createdDateTime";
var commonReferenceFields = "groupId groupName labels";
var lastLogFields = "id eventCode stamp serviceDataId userId comment";
var serviceDataCommonFields = "id createdDateTime due dueSlackInDays servicePlanId userId lastLog {".concat(lastLogFields, "}");
var mCommonFields = "type total deleteId deleteVersion";
var mServiceCommonFields = "name description createdDate createdBy dueSlackInDays ".concat(commonFields);
1;
var _subscriptions = {
    references: "\n    subscription References($version:Int!) {\n        mreference_getbulk(version: $version, subscribe:true)\n        {\n            ".concat(mCommonFields, "\n            data {\n                __typename\n                ... on QMUser {\n                    ").concat(commonFields, "\n                    ").concat(commonReferenceFields, "\n                    mobilePhoneNumber\n                    mobileCountryCode\n                    firstName\n                    middleName\n                    lastName\n                    fullName\n                    email\n                    documents {\n                      id name url createdDate mimeType fileName\n                    }\n                    serviceData {\n                        __typename\n                        ... on QMServiceDataOneshot { ").concat(serviceDataCommonFields, " }\n                        ... on  QMServiceDataPeriodic { ").concat(serviceDataCommonFields, "  startDate lastServiceDate period intervalType }\n                        ... on  QMServiceDataWarranty { ").concat(serviceDataCommonFields, "  purchaseDate warrantyInMonths }\n                    }\n                    deleted\n                }\n                ... on QMAsset { \n                    ").concat(commonFields, "\n                    ").concat(commonReferenceFields, "\n                    brand \n                    model \n                    keyWords\n                    description\n                    serial \n                    documents {\n                        id name url createdDate mimeType fileName\n                    }\n                    serviceData {\n                        __typename\n                        ... on QMServiceDataOneshot { ").concat(serviceDataCommonFields, " }\n                        ... on  QMServiceDataPeriodic { ").concat(serviceDataCommonFields, "  startDate lastServiceDate period intervalType }\n                        ... on  QMServiceDataWarranty { ").concat(serviceDataCommonFields, "  purchaseDate warrantyInMonths }\n                    }\n                    deleted\n                }\n                ... on QMSite { \n                    ").concat(commonFields, "\n                    ").concat(commonReferenceFields, "\n                    name\n                    geoArea {\n                        longitude\n                        latitude\n                    }\n                    documents {\n                      id name url createdDate mimeType fileName\n                    }\n                    serviceData {\n                        __typename\n                        ... on QMServiceDataOneshot { ").concat(serviceDataCommonFields, " }\n                        ... on  QMServiceDataPeriodic { ").concat(serviceDataCommonFields, "  startDate lastServiceDate period intervalType }\n                        ... on  QMServiceDataWarranty { ").concat(serviceDataCommonFields, "  purchaseDate warrantyInMonths }\n                    }\n                    deleted\n            }\n        }                \n    }\n}\n"),
    trackers: "\n  subscription Trackers($version:Int!) {\n      mtrackers_getbulk(version: $version, subscribe:true)\n      {\n          ".concat(mCommonFields, "\n          data \n          {\n              ").concat(commonFields, "\n              objId: id\n              vID\n              pID\n              key\n              type\n              model \n              trackerName\n              referenceId \n              deleted\n          }\n      }\n  }\n"),
    groups: "\n   subscription Groups($version:Int!)\n   {\n        mcommon_getgroups(version: $version, subscribe: true)\n        {            \n            ".concat(mCommonFields, "\n            data {\n                id:idStr \n                version\n                parentId\n                name\n                level  \n                type\n            }\n        }\n   }\n"),
    servicePlans: "\n   subscription Service($version: Int!)\n   {\n       mservice_get(version: $version, subscribe: true)\n       {\n           ".concat(mCommonFields, "\n           data {\n               __typename\n               ... on QMServicePlanOneshot \n               { \n                   ").concat(mServiceCommonFields, "\n                   deleted\n               }\n               ... on QMServicePlanPeriodic {\n                   ").concat(mServiceCommonFields, "\n                   period\n                   intervalType\n                   deleted\n               }\n               ... on QMServicePlanWarranty { \n                   ").concat(mServiceCommonFields, "\n                   warrantyInMonths\n                   deleted\n               }\n           }\n       }\n   }\n"),
    trackerLinks: "\n   subscription BLELinks($version: Int!)\n   {\n       otrackers_getlinks(version: $version, subscribe: true)\n       {\n           ".concat(mCommonFields, "\n           data {\n               id\n               createdDateTime: creationTime\n               receiverVID\n               transmitterVID\n               version\n               deleted\n           }\n       }\n   }\n"),
    referenceLinks: "\n   subscription ReferenceLink($version: Int!)\n   {\n        oreference_getlinks(version: $version, subscribe: true)\n        {\n            ".concat(mCommonFields, "\n            data {\n                id\n                type\n                createdDateTime: creationTime\n                referenceId1\n                referenceId2\n                version\n                deleted\n            }\n        }\n   }\n"),
    reports: "\n   subscription Reports($version: Int!) {\n        mreports_getreport(version: $version, subscribe: true)\n        {\n            ".concat(mCommonFields, "\n            data {\n                id\n                name\n                description\n                route\n                version\n            }\n        }\n   }\n   "),
    jobs: "subscription jobs($version: Int!) {  \n    mjob_get(version:$version, subscribe: true) {\n        ".concat(mCommonFields, "\n        data {\n            id\n            createdDateTime\n            name\n            description\n            version\n            disabled\n            deleted\n            trigger {\n                __typename\n                ... on QMJobTriggerAssetFound {\n                    assetId\n                }\n                ... on QMJobTriggerOneshot {\n                    when\n                }\n                ... on QMJobTriggerScheduleTimeOfDay {\n                    startTime\n                    period\n                    lastRun\n                    interval\n                }\n            }\n            action {\n            __typename\n            ... on QMJobActionAssetFoundMail {\n                    actionType\n                    assetId\n                    references\n                    groups\n                }\n                ... on QMJobActionReport {\n                    actionType\n                    reports {\n                    reportId\n                    args {name value }\n                    }\n                    groups\n                    references\n                    dontSendEmptyReport\n                }\n            }  \n        } \n    }  \n  }")
};
var _tempSubscriptions = {
    linkconnected: "subscription linkconnected {\n        otrackers_linkconnectedbulk(subscribe: true, includeInitial: true) {\n          type\n          total\n          deleteId\n          data{\n            id: vID\n            when\n          }\n          deleteVersion\n        }\n    }",
    connected: "subscription connected {\n        otrackers_connectedbulk(subscribe: true, includeInitial: true) {\n          type\n          total\n          deleteId\n          data{\n            id: vID\n            when\n          }\n          deleteVersion\n        }\n    }",
    voltage: "subscription voltage {\n        otrackers_infoanybulk(subscribe: true, includeInitial: true, fields:[EXTERNAL_VOLTAGE]) {\n            type\n            total\n            deleteId\n            deleteVersion\n            data {                \n                id: vID\n                field\n                value\n                stamp\n            }\n        }\n  }",
    internalvoltage: "subscription internalvoltage {\n        otrackers_infoanybulk(subscribe: true, includeInitial: true, fields:[INTERNAL_VOLTAGE, BATTERY_LEVEL]) {\n            type\n            total\n            deleteId\n            deleteVersion\n            data {\n                id: vID\n                field\n                value\n                stamp\n            }\n        }\n  }",
    temperature: "subscription temperature {\n        otrackers_infoanybulk(subscribe: true, includeInitial: true, fields:[TEMPERATURE]) {\n            type\n            total\n            deleteId\n            deleteVersion\n            data {\n                id: vID\n                value\n                stamp\n            }\n        }\n  }",
    activecounter: "subscription activecounter {\n        otrackers_infoanybulk(subscribe: true, includeInitial: true, fields:[ACTIVE_COUNTER]) {\n            type\n            total\n            deleteId\n            deleteVersion\n            data {\n                id: vID\n                value\n                stamp\n            }\n        }\n  }",
    speed: "subscription speed {\n    otrackers_getpositionsbulk(subscribe: true, includeInitial: true) {\n        type\n        total\n        deleteId\n        deleteVersion\n        data {\n            id: trackerVID\n            locationInfo {\n                date\n                speed\n            }    \n        }\n    }\n  }\n  "
};
var Subscriptions = new Map(Object.entries(_subscriptions));
exports.Subscriptions = Subscriptions;
var TempSubscriptions = new Map(Object.entries(_tempSubscriptions));
exports.TempSubscriptions = TempSubscriptions;
